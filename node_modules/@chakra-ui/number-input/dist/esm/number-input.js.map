{"version":3,"sources":["../../src/number-input.tsx"],"names":["chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","createContext","__DEV__","React","TriangleDownIcon","TriangleUpIcon","useNumberInput","NumberInputProvider","useNumberInputContext","name","errorMessage","NumberInput","props","ref","styles","ownProps","htmlProps","context","ctx","useMemo","position","zIndex","root","displayName","NumberInputStepper","display","flexDirection","top","insetEnd","margin","height","stepperGroup","NumberInputField","getInputProps","input","width","field","StyledStepper","baseStyle","justifyContent","alignItems","flex","transition","userSelect","cursor","lineHeight","NumberDecrementStepper","getDecrementButtonProps","decrement","stepper","children","NumberIncrementStepper","getIncrementButtonProps","increment"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { createContext, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { TriangleDownIcon, TriangleUpIcon } from \"./icons\"\nimport {\n  useNumberInput,\n  UseNumberInputProps,\n  UseNumberInputReturn,\n} from \"./use-number-input\"\n\ninterface NumberInputContext extends Omit<UseNumberInputReturn, \"htmlProps\"> {}\n\n/**\n * React context used to communicate between components\n */\nconst [\n  NumberInputProvider,\n  useNumberInputContext,\n] = createContext<NumberInputContext>({\n  name: \"NumberInputContext\",\n  errorMessage:\n    \"useNumberInputContext: `context` is undefined. Seems you forgot to wrap number-input's components within <NumberInput />\",\n})\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * If `true`, the input element will span the full width of its parent\n   *\n   * @deprecated\n   * This component defaults to 100% width,\n   * please use the props `maxWidth` or `width` to configure\n   */\n  isFullWidth?: boolean\n}\n\nexport interface NumberInputProps\n  extends UseNumberInputProps,\n    ThemingProps<\"NumberInput\">,\n    InputOptions,\n    Omit<HTMLChakraProps<\"div\">, keyof UseNumberInputProps> {}\n\n/**\n * NumberInput\n *\n * React component that provides context and logic to all\n * number input sub-components.\n *\n * It renders a `div` by default.\n *\n * @see Docs http://chakra-ui.com/numberinput\n */\nexport const NumberInput = forwardRef<NumberInputProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"NumberInput\", props)\n  const ownProps = omitThemingProps(props)\n\n  const { htmlProps, ...context } = useNumberInput(ownProps)\n  const ctx = React.useMemo(() => context, [context])\n\n  return (\n    <NumberInputProvider value={ctx}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          ref={ref}\n          {...htmlProps}\n          __css={{\n            position: \"relative\",\n            zIndex: 0,\n            ...styles.root,\n          }}\n        />\n      </StylesProvider>\n    </NumberInputProvider>\n  )\n})\n\nif (__DEV__) {\n  NumberInput.displayName = \"NumberInput\"\n}\n\nexport interface NumberInputStepperProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * NumberInputStepper\n *\n * React component used to group the increment and decrement\n * button spinners.\n *\n * It renders a `div` by default.\n *\n * @see Docs http://chakra-ui.com/components/number-input\n */\nexport const NumberInputStepper = forwardRef<NumberInputStepperProps, \"div\">(\n  (props, ref) => {\n    const styles = useStyles()\n    return (\n      <chakra.div\n        aria-hidden\n        ref={ref}\n        {...props}\n        __css={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          position: \"absolute\",\n          top: \"0\",\n          insetEnd: \"0px\",\n          margin: \"1px\",\n          height: \"calc(100% - 2px)\",\n          zIndex: 1,\n          ...styles.stepperGroup,\n        }}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  NumberInputStepper.displayName = \"NumberInputStepper\"\n}\n\nexport interface NumberInputFieldProps extends HTMLChakraProps<\"input\"> {}\n\n/**\n * NumberInputField\n *\n * React component that represents the actual `input` field\n * where users can type to edit numeric values.\n *\n * It renders an `input` by default and ensures only numeric\n * values can be typed.\n *\n * @see Docs http://chakra-ui.com/numberinput\n */\nexport const NumberInputField = forwardRef<NumberInputFieldProps, \"input\">(\n  (props, ref) => {\n    const { getInputProps } = useNumberInputContext()\n\n    const input = getInputProps(props, ref)\n    const styles = useStyles()\n\n    return (\n      <chakra.input\n        {...input}\n        __css={{\n          width: \"100%\",\n          ...styles.field,\n        }}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  NumberInputField.displayName = \"NumberInputField\"\n}\n\nexport const StyledStepper = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flex: 1,\n    transition: \"all 0.3s\",\n    userSelect: \"none\",\n    cursor: \"pointer\",\n    lineHeight: \"normal\",\n  },\n})\n\nexport interface NumberDecrementStepperProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * NumberDecrementStepper\n *\n * React component used to decrement the number input's value\n *\n * It renders a `div` with `role=button` by default\n */\nexport const NumberDecrementStepper = forwardRef<\n  NumberDecrementStepperProps,\n  \"div\"\n>((props, ref) => {\n  const styles = useStyles()\n  const { getDecrementButtonProps } = useNumberInputContext()\n  const decrement = getDecrementButtonProps(props, ref)\n\n  return (\n    <StyledStepper {...decrement} __css={styles.stepper}>\n      {props.children ?? <TriangleDownIcon />}\n    </StyledStepper>\n  )\n})\n\nif (__DEV__) {\n  NumberDecrementStepper.displayName = \"NumberDecrementStepper\"\n}\n\nexport interface NumberIncrementStepperProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * NumberIncrementStepper\n *\n * React component used to increment the number input's value\n *\n * It renders a `div` with `role=button` by default\n */\nexport const NumberIncrementStepper = forwardRef<\n  NumberIncrementStepperProps,\n  \"div\"\n>((props, ref) => {\n  const { getIncrementButtonProps } = useNumberInputContext()\n  const increment = getIncrementButtonProps(props, ref)\n  const styles = useStyles()\n\n  return (\n    <StyledStepper {...increment} __css={styles.stepper}>\n      {props.children ?? <TriangleUpIcon />}\n    </StyledStepper>\n  )\n})\n\nif (__DEV__) {\n  NumberIncrementStepper.displayName = \"NumberIncrementStepper\"\n}\n"],"file":"number-input.js"}