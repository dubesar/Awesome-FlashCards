export function getOwnerWindow(node) {
  var _getOwnerDocument$def, _getOwnerDocument;

  return node instanceof Element ? (_getOwnerDocument$def = (_getOwnerDocument = getOwnerDocument(node)) == null ? void 0 : _getOwnerDocument.defaultView) != null ? _getOwnerDocument$def : window : window;
}
export function getOwnerDocument(node) {
  var _node$ownerDocument;

  return node instanceof Element ? (_node$ownerDocument = node.ownerDocument) != null ? _node$ownerDocument : document : document;
}
export function getRelatedTarget(event) {
  return event.relatedTarget || event.nativeEvent.explicitOriginalTarget || document.activeElement;
}
export function canUseDOM() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
export var isBrowser = canUseDOM();
/**
 * Get the normalized event key across all browsers
 * @param event keyboard event
 */

export function normalizeEventKey(event) {
  var {
    key,
    keyCode
  } = event;
  var isArrowKey = keyCode >= 37 && keyCode <= 40 && key.indexOf("Arrow") !== 0;
  var eventKey = isArrowKey ? "Arrow" + key : key;
  return eventKey;
}
export var dataAttr = condition => condition ? "" : undefined;
export var ariaAttr = condition => condition ? true : undefined;
export var cx = function cx() {
  for (var _len = arguments.length, classNames = new Array(_len), _key = 0; _key < _len; _key++) {
    classNames[_key] = arguments[_key];
  }

  return classNames.filter(Boolean).join(" ");
};
export function getActiveElement(node) {
  var doc = getOwnerDocument(node);
  return doc == null ? void 0 : doc.activeElement;
}
export function contains(parent, child) {
  if (!parent) return false;
  return parent === child || parent.contains(child);
}
export function addDomEvent(target, eventName, handler, options) {
  target.addEventListener(eventName, handler, options);
  return () => {
    target.removeEventListener(eventName, handler, options);
  };
}
//# sourceMappingURL=dom.js.map